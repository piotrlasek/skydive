
with
	-- Select out all cells at bottom level, add zoo for super-cell.
	SuperCell (lev, zoo, super, left, right, #point) as (
		select  lev, zoo,
				zooAtLevel(2, 31,
					(select max(lev) from Pyramid) - 1,
					zoo),
				left, right, #point
		from Pyramid
		where lev = (select max(lev) from Pyramid)
	),
	-- This will seem crazy, but there is a method to our madness.
	-- We use a window aggregation to "replace" super with the max
	-- from begining of the list, which results in _very_ same value.
	-- But now the Optimizer knows the order is the same as for zoo!
	Upper (lev, zoo, up, left, right, #point) as (
		select  lev, zoo,
				max(super) over (
					order by zoo asc
					rows between unbounded preceding and current row),
				left, right, #point
		from SuperCell
	),
	-- Aggregate by 'up'.
	AggrCell (lev, zoo, up, row#, left, right, #point) as (
		select  lev, zoo, up,
				row_number() over (
						partition by up
						order by zoo asc),
				min(left)   over (partition by up),
				min(right)  over (partition by up),
				sum(#point) over (partition by up)
		from Upper
	),
	NewCell (lev, zoo, up, row#, left, right, #point) as (
		select  case
					when left > right then left
					else                   right
				end,    -- the level of this new tile
				zoo,    -- its zoo
				up,     -- the immediate super-cell ceiling
				row#,   -- row# within partition group
				left,   -- touches left neighbour tile at this level
				right,  -- touches left neighbour tile at this level
				#point  -- aggregated number of points in new tile
		from AggrCell
	),
	-- Collapse the partition groups.
	AddCell (levlow, levhigh, zoo, up, left, right, low#, high#, #point) as (
		select  min(lev),
				max(lev),
				min(zoo),
				up,
				min(left),
				min(right),
				min(row#),
				max(row#),
				min(#point)
		from NewCell
		group by up
	)
select *
from AddCell
fetch first 20 rows only;

