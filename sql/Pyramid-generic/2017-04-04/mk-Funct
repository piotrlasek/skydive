-- ===========================================================================
-- parke godfrey
-- 2017-03-31 : v0
-- 2017-04-03 : current

-- ===========================================================================
-- adjAtLevel
--     dim     : the dimensionality of our zoo's
--     deepest : the bottom stratum / level (e.g., 32)
--     zooA    : one zoo as a bigint
--     zooB    : second zoo as a bigint (might be NULL)
-- returns the stratum / level in which the two zoo's are adjacent
-- ---------------------------------------------------------------------------
-- This is TEMPORARY.  We should choose something different for handling
-- zoo's than BIGINT, so we can accommodate any number of bits we need.
-- Plus, this implementation is quite likely platform sensitive for
-- correctness.

create function adjAtLevel (
	dim     smallint,
	deepest smallint,
	zooA    bigint,
	zooB    bigint
)
returns smallint
language sql
begin atomic
	if (zooB is null) then
		return 0;
	elseif (zooA = zooB) then
		return deepest + 1;
	else
		return deepest
				- smallint(ln(bitxor(zooA, zooB))
					/ (dim * ln(2)) )
				+ 1;
	end if;
end!

-- ===========================================================================
-- zooAtLevel
--     dim     : the dimensionality of our zoo's
--     deepest : the deepest level of a zoo
--     level   : level we want the zoo "cut" to
--     zoo     : the zoo to "convert"
-- returns the zoo "converted" to represent tiles at level

create function zooAtLevel (
	dim     smallint,
	deepest smallint,
	level   smallint,
	zoo     bigint
)
returns bigint
language sql
begin atomic
	return zoo / power(power(bigint(2), dim), abs(deepest - level +1));
end!

