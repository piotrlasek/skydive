
begin atomic

declare dim_      smallint default  2;
declare maxDepth_ smallint default 31;
declare stratum_  smallint;

set stratum_ = (select max(lev) from Pyramid);
while stratum_ > 0 do
	insert into Pyramid(lev, zoo, left, right, #point)
	with
		-- Select out all cells at level stratum_, add zoo for super-cell.
		SuperCell (lev, zoo, super, left, right, #point) as (
			select  lev, zoo,
					zooAtLevel(dim_, maxDepth_, stratum_ - 1, zoo),
					left, right, #point
			from Pyramid
			where lev = stratum_
		),
		-- This will seem crazy, but there is a method to our madness.
		-- We use a window aggregation to "replace" super with the max
		-- from begining of the list, which results in _very_ same value.
		-- But now the Optimizer knows the order is the same as for zoo!
		Upper (lev, zoo, up, left, right, #point) as (
			select  lev, zoo,
					max(super) over (
						order by zoo asc
						rows between unbounded preceding and current row),
					left, right, #point
			from SuperCell
		),
		-- Aggregate by 'up'.
		AggrCell (lev, zoo, up, row#, left, right, #point) as (
			select  lev, zoo, up,
					row_number() over (
							partition by up
							order by zoo asc),
					min(left)   over (partition by up),
					min(right)  over (partition by up),
					sum(#point) over (partition by up)
			from Upper
		)
	-- Pick first row from each partition group to represent the super-cell.
	-- Pour into the stratum reserve.
	select  case
				when left > right then left
				else                   right
			end,    -- the level of this new tile
			zoo,    -- its zoo
			left,   -- touches left neighbour tile at this level
			right,  -- touches left neighbour tile at this level
			#point  -- aggregated number of points in new tile
	from AggrCell
	where row# = 1;

	set stratum_ = stratum_ - 1;

end while;

end!
