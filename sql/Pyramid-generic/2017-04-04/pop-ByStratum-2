
insert into Stratum(lev, zoo, #point)
with
	-- Select out all cells at level _stratum, add zoo for super-cell.
	SuperCell (lev, zoo, super, #point) as (
		select  lev, zoo,
				zooAtLev(_stratum, _maxDepth, zoo),
				#point
		from Pyramid
		where lev = _stratum
	),
	-- This will seem crazy, but there is a method to our madness.
	-- We use a window aggregation to "replace" super with the max
	-- from begining of the list, which results in _very_ same value.
	-- But now the Optimizer knows the order is the same as for zoo!
	Upper (lev, zoo, up, #point) as (
		select  lev, zoo,
				max(super) over (
					order by zoo asc
					rows between unbounded preceding and current row),
				#point
		from SuperCell
	),
	-- Aggregate by 'up'.
	AggrCell (lev, zoo, up, row#, #point) as (
		select  lev, zoo, up,
				row_number() over (
						partition by up
						order by zoo),
				max(#point) over (partition by up)
		from Upper
	)
-- Pick first row from each partition group to represent the super-cell.
-- Pour into the stratum reserve.
select lev - 1, zoo, #point
from AggrCell
where row# = 1;

