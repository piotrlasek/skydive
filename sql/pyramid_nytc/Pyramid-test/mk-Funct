-- ===========================================================================
-- mk-Funct : declare Zed-Order functions we will need
-- 
-- parke godfrey
-- 2017-03-31 : v0
-- 2017-04-03 : current
-- 2017-05-03 : (PL) Porting to Postgresql
-- ===========================================================================

-- ===========================================================================
-- adjAtLevel
--     dim     : the dimensionality of our zoo's
--     deepest : the bottom stratum / level (e.g., 32)
--     zooA    : one zoo as a bigint
--     zooB    : second zoo as a bigint (might be NULL)
-- returns the stratum / level in which the two zoo's are adjacent
-- ---------------------------------------------------------------------------
-- This is TEMPORARY.  We should choose something different for handling
-- zoo's than BIGINT, so we can accommodate any number of bits we need.
-- Plus, this implementation is quite likely platform sensitive for
-- correctness.

drop function if exists adjAtLevel(dim smallint, deepest smallint, zooA bigint, zooB bigint) cascade;

create function adjAtLevel (
    dim     smallint,
    deepest smallint,
    zooA    bigint,
    zooB    bigint
) returns smallint as $$
begin
    if (zooB is null) then
        return 0;
    elseif (zooA = zooB) then
        return deepest + 1;
    else
        return deepest
                - floor(ln(zooA # zooB)  / (dim * ln(2)));
    end if;
end;
$$ language plpgsql;

-- select adjatlevel(cast((3) as smallint), cast((4) as smallint), cast((3) as bigint), cast((4) as bigint));

-- ===========================================================================
-- zooAtLevel
--     dim     : the dimensionality of our zoo's
--     deepest : the deepest level of a zoo
--     level   : level we want the zoo "cut" to
--     zoo     : the zoo to "convert"
-- returns the zoo "converted" to represent tiles at level

drop function if exists zooAtLevel(dim smallint, deepest smallint, level smallint, zoo bigint) cascade;

create function zooAtLevel(
    dim smallint,
    deepest smallint,
    level smallint,
    zoo bigint
    ) returns bigint as $$
begin
    return floor(zoo / power(power(CAST((2) as bigint), dim), abs(deepest - level)));
end;
$$ language plpgsql;

-- select zooAtLevel(cast((2) as smallint), cast((31) as smallint), cast((30) as smallint), cast((2) as bigint));
